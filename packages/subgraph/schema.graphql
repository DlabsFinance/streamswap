# Adapted from https://github.com/Uniswap/uniswap-v2-subgraph

type StreamSwapFactory @entity {
  # factory address
  id: ID!

  # pool info
  poolCount: Int!
}

type Token @entity {
  # token address
  id: ID!

  # mirrored from the smart contract
  symbol: String!
  name: String!
  decimals: BigInt!

  # Adress of the underlying (non-super) token
  underlyingToken: Bytes!

  # used for other stats like marketcap
  totalSupply: BigInt!

  instantSwapCount: BigInt!
  continuousSwapSetCount: BigInt!

  # liquidity across all pools
  totalLiquidity: BigDecimal!

  # derived fields
  tokenDayData: [TokenDayData!]! @derivedFrom(field: "token")
}

type PooledToken @entity {
  # tokenId + "-" + pool address
  id: ID!

  # links to other data
  pool: Pool!
  token: Token!

  # qty stored of this token in the pool
  reserve: BigDecimal!
  # lifetime volume stats
  volume: BigDecimal!
}

type Pool @entity {
  # pool address
  id: ID!

  # tokens stored in the pool
  tokens: [PooledToken!]! @derivedFrom(field: "pool")
  tokenAddresses: [Bytes!]!

  instantSwapCount: BigInt!
  continuousSwapSetCount: BigInt!

  # creation stats
  createdAtTimestamp: BigInt!
  createdAtBlockNumber: BigInt!

  # derived fields
  poolHourData: [PoolHourData!]! @derivedFrom(field: "pool")
  instantSwaps: [InstantSwap!]! @derivedFrom(field: "pool")
  continuousSwaps: [ContinuousSwap!]! @derivedFrom(field: "pool")
}

type User @entity {
  id: ID!
  balances: [UserToken!]! @derivedFrom(field: "user")
  instantSwaps: [InstantSwap!]! @derivedFrom(field: "user")
  continuousSwaps: [ContinuousSwap!]! @derivedFrom(field: "user")
}

type UserToken @entity {
  # userId - tokenId
  id: ID!
  user: User!
  token: Token!
  balance: BigDecimal!
  netFlow: BigDecimal!
  # timestamp of the last action made
  lastAction: BigInt!
}

type Transaction @entity {
  id: ID! # txn hash
  blockNumber: BigInt!
  timestamp: BigInt!

  instantSwaps: [InstantSwap!]! @derivedFrom(field: "transaction")
  continuousSwaps: [ContinuousSwap!]! @derivedFrom(field: "transaction")
}

type InstantSwap @entity {
  # transaction hash + "-" + index in swaps Transaction array
  id: ID!
  pool: Pool!
  user: User!
  transaction: Transaction!
  # need this to pull recent txns for specific token or pool
  timestamp: BigInt!

  tokenIn: Token!
  tokenOut: Token!

  amountIn: BigDecimal!
  amountOut: BigDecimal!
}

type ContinuousSwap @entity {
  # keccak256(userId + poolId + tokenInId + tokenOutId)
  id: ID!
  pool: Pool!
  user: User!
  # last transaction that set this swap (not output rate update)
  transaction: Transaction!
  # last transaction that set this swap (not output rate update)
  timestamp: BigInt!

  tokenIn: Token!
  tokenOut: Token!

  # tokens/s
  minOut: BigDecimal!
  # tokens/s
  maxOut: BigDecimal!

  # Rate is in tokens/s
  rateIn: BigDecimal!
  # Rate is in tokens/s, this will be zero once it is stopped
  currentRateOut: BigDecimal!

  # info to make calculating amount swapped live, store integration over all previous rates and allow for live updates
  # with the current data
  totalOutUntilLastSwap: BigDecimal!
  timestampLastSwap: BigInt!
}

type HourlyPooledToken @entity {
  id: ID!
  token: Token!
  reserve: BigDecimal!
  hourlyVolume: BigDecimal!
}

type PoolHourData @entity {
  id: ID!
  date: Int! # unix timestamp for start of hour
  pool: Pool!

  tokens: [HourlyPooledToken!]!

  # volume stats
  hourlyInstantSwapCount: BigInt!
  hourlyContinuousSwapSetCount: BigInt!
}

type DailyPooledToken @entity {
  id: ID!
  token: Token!
  reserve: BigDecimal!
  dailyVolume: BigDecimal!
}

# Data accumulated and condensed into day stats for each exchange
type PoolDayData @entity {
  id: ID!
  date: Int!
  pool: Pool!

  tokens: [DailyPooledToken!]!

  # volume stats
  dailyInstantSwapCount: BigInt!
  dailyContinuousSwapSetCount: BigInt!
}

type TokenDayData @entity {
  id: ID!
  date: Int!
  token: Token!

  # volume stats
  dailyVolumeToken: BigDecimal!
  dailyInstantSwapCount: BigInt!
  dailyContinuousSwapSetCount: BigInt!

  # liquidity stats
  totalLiquidityToken: BigDecimal!
}